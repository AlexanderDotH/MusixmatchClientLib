using MusixmatchClientLib.API.Model.Exceptions;
using System;
using System.Threading;

namespace MusixmatchClientLib.Exploits
{
    /// <summary>
    /// Note: These exploits DO NOT DAMAGE THE DATABASE OF LYRICS, I dont mind if you use them lol.
    /// If you snatch my lyrics I'll be really sad :c
    /// </summary>
    public static class Extensions
    {
        /// <summary>
        /// Using an exploit discovered by me to get points for sending already-existing sync for the given song.
        /// This also messes up with packets' spent time to get the sync accepted.
        /// </summary>
        /// <example>
        /// Usage example:
        /// <code>
        /// foreach (var token in File.ReadAllLines("tokens.txt"))
        ///     new Thread(() => new MusixmatchClient(new MusixmatchToken(token)).SyncExploit(206481521, int.MaxValue));
        /// </code>
        /// </example>
        /// <param name="id">Musixmatch track id</param>
        /// <param name="iterations">How many times should the exploit be repeated, +7 points per one</param>
        /// <param name="sleepTime">Custom sleep time, 60s per one token is a recommended minimum</param>
        public static void SyncExploit(this MusixmatchClient client, int id, int iterations, int sleepTime = 60000)
        {
            var trackInfo = client.GetTrackById(id);
            if (trackInfo.HasSubtitles != 1)
                throw new ArgumentException("This track does not have subtitles");
            var subtitle = client.GetTrackSubtitlesRaw(id, MusixmatchClient.SubtitleFormat.Musixmatch);
            for (int i = 0; i < iterations; i++)
            {
                client.SubmitTrackLyricsSynced(id, subtitle.SubtitleBody);
                Thread.Sleep(sleepTime);
            }
        }

        /// <summary>
        /// An exploit discovered right after <see cref="SyncExploit"/>, this one uses another (or the same) award-vulnerability. 
        /// It ignores server errors during AiQuestions and gets points as if you submit mood of the song.
        /// </summary>
        /// Usage example:
        /// <code>
        /// foreach (var token in File.ReadAllLines("tokens.txt"))
        ///     new Thread(() => new MusixmatchClient(new MusixmatchToken(token)).MoodExploit(206481521, 100, 80, int.MaxValue));
        /// </code>
        /// </example>
        /// <param name="id">Musixmatch track id</param>
        /// <param name="energy">Song energy, see <see cref="MusixmatchClient.SubmitTrackMood(int, int, int)"/></param>
        /// <param name="mood">Song mood, see <see cref="MusixmatchClient.SubmitTrackMood(int, int, int)"/></param>
        /// <param name="iterations">How many times should the exploit be repeated, +1 point per one</param>
        /// <param name="sleepTime">Custom sleep time, 60s per one token is a recommended minimum</param>
        public static void MoodExploit(this MusixmatchClient client, int id, int energy, int mood, int iterations, int sleepTime = 60000)
        {
            for (int i = 0; i < iterations; i++)
            {
                try { client.SubmitTrackMood(id, energy, mood); }
                catch (MusixmatchRequestException ex) { /* Ignore theese */ }
                catch (ArgumentException ex) { throw ex; }
                Thread.Sleep(sleepTime);
            }
        }

        /// <summary>
        /// "Snatch" (some user on Musixmatch's slack mentioned this word lol) lyrics from other user. Curator required to work propperly. 
        /// Removes the previous author of the lyrics and replaces with your user.
        /// </summary>
        /// <param name="id">Musixmatch track id</param>
        public static void SnatchLyrics(this MusixmatchClient client, int id)
        {
            var lyrics = client.GetTrackLyrics(id);
            if (lyrics.CanEdit == 1 && lyrics.LyricsUser.User.IsMine == 0)
                client.SubmitTrackLyrics(id, lyrics.LyricsBody);
        }
    }
}
